1. Написать скрипт, который удаляет из текстового файла пустые строки и заменяет маленькие символы на большие 
(воспользуйтесь tr или sed). Скрипт должен выводить информацию о том, как его использовать.

#!/bin/bash

[ "$1" = "--help" ]&&{
                        echo Welcome to ${0}
                        echo This program is required to remove white spaces at the beginning of a string
                        echo and convert letters from lowercase to uppercase.
                        echo Usage:
                        echo ${0} filename1 filename2 ..
                        exit
}

[ "$#" = "0" ]&&{
                        echo Arguments didn\'t added
                        echo More information about usage this programm:
                        echo ${0} --help
                        exit
}

echo Write the full path to the directory where your file is located.
echo Example: /home/username/.../
read
cd $REPLY

[ "$?" != "0" ]&&echo Please try to write your directory correctly.&&echo Type: $0 --help - for usage information.&&exit 1

for i in $@
        do
                [ "${i}" = "*" ]&&echo Directory is empty. &&break
                cat "${i}" | tr [:lower:] [:upper:] | tr -d [=\ =] | tr -d [=\  =] >replace
                mv replace ${i}
        done

2. Определеить, какие ошибки записывается в /var/log/auth.log при попытке неудачной аутентификации пользователя для ssh подключения,
для подключения через терминал - ctrl+alt+f3 и для подключения с помощью виртуального терминала (gui приложения).
Сделать скрипт мониторинга лога /var/log/auth.log на наличие этих событий, который выводит сообщения о попытке неудачной аутентификации на экран.
Проверить скрипт, выполнив ошибочную регистрацию с терминала, с помощью виртуального терминала и через ssh. 
Скрипт должен выводить информацию о том, как его использовать.

#!/bin/bash

[ "$1" = "--help" ]&&{
                        echo Welcome to $0
                        echo This program monitors your /var/log/auth.log file 
                        echo for registration errors.
                        echo Usage:
                        echo $0 - print last 10 lines.
                        echo $0 somenumber - Enter how many lines to print \(from 0 to 100\).
                        echo Expression:
                        echo $0 10
                        exit
}

if [ "$#" -eq 0  ]
        then
                sed '/authentication\ failure\|failed\ password\|connection\ closed/!d' /var/log/auth.log | tail
        else
                sed '/authentication\ failure\|failed\ password\|connection\ closed/!d' /var/log/auth.log | tail -n $1
        fi

3. Написать скрипт, который в указанной с помощью параметра -d директории создает указанные файлы. Если файлы уже существуют,
то выводится предупреждения на экран. Если указано несколько директорий, то выводится ошибка с соответствуюзей информацией. 
Созданным файлам, которые имеют разрешения '.sh' нужно дать права на выполнения. 
Скрипт должен выводить информацию о том, как его использовать и понятные сообщения об ошибках. Примеры запуска:

./script.sh -d /tmp/task_3
./script.sh -d file1 file2 file3
./script.sh -d /tmp/task_3 file1 file2.sh file3
./script.sh -d /tmp/task_3 -d /tmp/task_3_2 file1 file2.sh file3
_____________________________________________________________________________________________________________________________
#!/bin/bash

if [ "$1" == "--help" ] ; then
        echo Добро пожаловать в программу по созданию файлов
        echo
        echo Использование: $0 \[Ключ\]… \[Директория/…\] НазваниеФайла…
        echo Пожалуйста, указывайте каждый аргумент отдельно
        echo Все, что указано в \[Квадратных скобках\], HE является обязательным
        echo
        echo -d - ключ, позволяющий указать директорию, где необходимо создать файлы
        echo     \(указание директории совместно с этим ключом является обязательным\)
        echo --help     показать эту справку и выйти
        exit 0
elif [ "$1" == "-d" ] ; then
        cd "$2"
        shift
        while [[ "$#" -gt 1 ]]; do
                [ "$2" == "-d" ]&&{
                                        echo Вы указали больше одной директории, поэтому файлы были созданы только в первой указанной директории
                                        echo Подробная информация об использовании: "$0" --help
                                        exit 1
                                }
                [ -e "$2" ]&&echo Файл с таким именем, уже существует.&&shift&&continue

                case "$2" in
                        *.sh)
                                touch "$2"
                                chmod +x "$2"
                                ;;
                        *)
                                touch "$2"
                                ;;
                esac

                echo Файл "$2" создан.
                shift
        done
        cd ~-
        exit 0
else
        for i in "$@"; do
                [ -e "$i" ]&&echo Файл с таким именем, уже существует.&&continue

                case $i in
                        *.sh)
                                touch $i
                                chmod +x $i
                                ;;
                        *)
                                touch $i
                                ;;
                esac

                echo Файл "$i" создан.
        done
        exit 0
fi
cd ~-

4.* Создать файл crontab, который ежедневно регистрирует занятое каждым пользователем дисковое пространство в его домашней директории.

Скрипт:
______________________________________
#!/bin/bash

if [ -e "$HOME"/memory.log ] ; then

        df -h /home | sed -n '2p' | cut -b 30-40 | perl -pe 's/^\ /Использовано\ /g;s/(?!\ [^Использовано\ .*\ ])(?:\ )/\ Доступно/g' | tee "$HOME"/memory.log

else

        touch "$HOME"/memory.log

fi
______________________________________
$crontab -e

Запись в crontab:
0 18 * * * /home/evgeny/script.sh
______________________________________
$sudo crontab -u User1 -e

Запись в crontab:
0 18 * * * /home/evgeny/script.sh
______________________________________
$sudo crontab -u User2 -e

Запись в crontab:
0 18 * * * /home/evgeny/script.sh
______________________________________

5.* Создать скрипт ownersort.sh, который в заданной папке копирует файлы в директории, названные по имени владельца каждого файла.
Учтите, что после копирования файл должен принадлежать соответствующему владельцу.

#!/bin/bash

if [ "$1" == "--help" ] ; then
        echo Добро пожаловать в программу по сортировке файлов
        echo
        echo Использование: $0 \[Ключ\]… \[Директория/…\]
        echo Пожалуйста, указывайте каждый аргумент отдельно
        echo Все, что указано в \[Квадратных скобках\], HE является обязательным
        echo
        echo -d - ключ, позволяющий указать директорию, где необходимо сортировать файлы
        echo     \(указание директории совместно с этим ключом является обязательным\)
        echo --help     показать эту справку и выйти
        exit 0

elif [ "$#" -ge 2 ] ; then
        count=4 #в ls -la читаем колонку с uid с 4 строки
        cd "$2"
        for i in *
        do
                [ -d $i ]&&{
                                echo Пропускаем каталог $i :\)
                                ((count++))
                                continue #если попалась дирка - пропускаем
                }

                uid=$(ls -la | sed -n "${count}p"| cut -f 3 -d " ") #получили имя владельца

                [ "$uid" == "root" ]&&{
                                        echo Пользователь файла "$i" root\, пропускаем :\)
                                        ((count++))
                                        continue #если пользователь файла рут - пропускаем файл
                }

                sudo cp $i /home/${uid}
                sudo chown $uid /home/${uid}/${i}
                ((count++)) #читаем владельца следующего файла в ls -la
        done
        cd ~-
        exit 0

elif [ "$#" -lt 1 ] ; then
        count=4 #в ls -la читаем колонку с uid с 4 стр
        for i in *
        do
                [ -d $i ]&&{
                                echo Пропускаем каталог $i :\)
                                ((count++))
                                continue #если попалась дирка - пропускаем
                }

                uid=$(ls -la | sed -n "${count}p"| cut -f 3 -d " ") #получили имя владельца

                [ "$uid" == "root" ]&&{
                                        echo Пользователь файла "$i" root\, пропускаем :\)
                                        ((count++))
                                        continue #если пользователь файла рут - пропускаем файл
                }

                sudo cp $i /home/${uid}
                sudo chown $uid /home/${uid}/${i}
                echo Файл $i скопирован.
                ((count++)) #читаем владельца следующего файла в ls -la
        done
        exit 0
fi

6.* Периодическая выдача на stdout сообщенияо том, сколько времени прошло после запуска таймера (т.е. скрипта) и сколько осталось до концаработы.
Параметры таймера передать при запуске скрипта через параметры.

7.* Получение рекурсивного списка файлов, имеющих длинные имена(больше заданного числа), сортировка по полному имени файлов (включающему полное путевоеимя, начиная с /) 
и выдача полученного списка в stdout и, одновременно, в файл. Параметры скрипта: имя директории, в которой производится рекурсивный поиск, 
и натуральное число  ми-нимальная длина имени. Основные средства: структура for, команда find, 'tee'.